MongoDB:
Start MongoDB
sudo service mongodb start
Stop MongoDB
sudo service mongodb stop
Restart MongoDB
sudo service mongodb restart

To use MongoDB run the following command.
mongo
The following example shows the syntax of createCollection() method with few important options −
> db.createCollection("mycol", { capped : true, autoIndexID : true, size : 6142800, max : 10000 } ){
"ok" : 0,
"errmsg" : "BSON field 'create.autoIndexID' is an unknown field.",
"code" : 40415,
"codeName" : "Location40415"
}
>

drop the collection with the name mycollection.
>db.mycollection.drop()
true
>

The basic syntax of insert() command is as follows −
db.users.insert({
... _id : ObjectId("507f191e810c19729de860ea"),
... title: "MongoDB Overview",
... description: "MongoDB is no sql database",
... by: "tutorials point",
... url: "http://www.tutorialspoint.com",
... tags: ['mongodb', 'database', 'NoSQL'],
... likes: 100
... })
WriteResult({ "nInserted" : 1 })
>

The basic syntax of find() method is as follows −
db.mycol.find()
{ "_id" : ObjectId("5dd4e2cc0821d3b44607534c"), "title" : "MongoDB Overview", "description" : "MongoDB is no SQL database", "by" : "tutorials point", "url" : "http://www.tutorialspoint.com", "tags" : [ "mongodb", "database", "NoSQL" ], "likes" : 100 }
{ "_id" : ObjectId("5dd4e2cc0821d3b44607534d"), "title" : "NoSQL Database", "description" : "NoSQL database doesn't have tables", "by" : "tutorials point", "url" : "http://www.tutorialspoint.com", "tags" : [ "mongodb", "database", "NoSQL" ], "likes" : 20, "comments" : [ { "user" : "user1", "message" : "My first comment", "dateCreated" : ISODate("2013-12-09T21:05:00Z"), "like" : 0 } ] }
>

The pretty() Method
To display the results in a formatted way, you can use pretty() method
>db.COLLECTION_NAME.find().pretty()
> db.mycol.find().pretty()
{
        "_id" : ObjectId("5dd4e2cc0821d3b44607534c"),
        "title" : "MongoDB Overview",
        "description" : "MongoDB is no SQL database",

        "by" : "tutorials point",
        "url" : "http://www.tutorialspoint.com",
        "tags" : [
                "mongodb",
                "database",
                "NoSQL"
        ],
        "likes" : 100
}
{
        "_id" : ObjectId("5dd4e2cc0821d3b44607534d"),
        "title" : "NoSQL Database",
        "description" : "NoSQL database doesn't have tables",
        "by" : "tutorials point",
        "url" : "http://www.tutorialspoint.com",
        "tags" : [
                "mongodb",
                "database",
                "NoSQL"
        ],
        "likes" : 20,
        "comments" : [
                {
                        "user" : "user1",
                        "message" : "My first comment",
                        "dateCreated" : ISODate("2013-12-09T21:05:00Z"),
                        "like" : 0
                }
        ]
}


AND in MongoDB
Syntax
>db.mycol.find({ $and: [ {<key1>:<value1>}, { <key2>:<value2>} ] })
> db.mycol.find({$and:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
{
        "_id" : ObjectId("5dd4e2cc0821d3b44607534c"),
        "title" : "MongoDB Overview",
        "description" : "MongoDB is no SQL database",
        "by" : "tutorials point",
        "url" : "http://www.tutorialspoint.com",
        "tags" : [
                "mongodb",
                "database",
                "NoSQL"
        ],
        "likes" : 100
}
>

OR in MongoDB
Syntax
>db.mycol.find(
   {
      $or: [
         {key1: value1}, {key2:value2}
      ]
   }
).pretty()


Example
>db.mycol.find({$or:[{"by":"tutorials point"},{"title": "MongoDB Overview"}]}).pretty()
{
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
>
Using AND and OR Together
Example
>db.mycol.find({"likes": {$gt:10}, $or: [{"by": "tutorials point"},
   {"title": "MongoDB Overview"}]}).pretty()
{
   "_id": ObjectId(7df78ad8902c),
   "title": "MongoDB Overview", 
   "description": "MongoDB is no sql database",
   "by": "tutorials point",
   "url": "http://www.tutorialspoint.com",
   "tags": ["mongodb", "database", "NoSQL"],
   "likes": "100"
}
>
NOR in MongoDB
Syntax
>db.COLLECTION_NAME.find(
        {
                $not: [
                        {key1: value1}, {key2:value2}
                ]
        }
)
Example
db.empDetails.insertMany(
        [
                {
                        First_Name: "Radhika",
                        Last_Name: "Sharma",
                        Age: "26",
                        e_mail: "radhika_sharma.123@gmail.com",
                        phone: "9000012345"
                },
                {
                        First_Name: "Rachel",
                        Last_Name: "Christopher",
                        Age: "27",
                        e_mail: "Rachel_Christopher.123@gmail.com",
                        phone: "9000054321"
                },
                {
                        First_Name: "Fathima",
                        Last_Name: "Sheik",
                        Age: "24",
                        e_mail: "Fathima_Sheik.123@gmail.com",
                        phone: "9000054321"
                }
        ]
)

> db.empDetails.find(
        {
                $nor:[
                        40
                        {"First_Name": "Radhika"},
                        {"Last_Name": "Christopher"}
                ]
        }
).pretty()
{
        "_id" : ObjectId("5dd631f270fb13eec3963bef"),
        "First_Name" : "Fathima",
        "Last_Name" : "Sheik",
        "Age" : "24",
        "e_mail" : "Fathima_Sheik.123@gmail.com",
        "phone" : "9000054321"
}

NOT in MongoDB
Syntax
>db.COLLECTION_NAME.find(
        {
                $NOT: [
                        {key1: value1}, {key2:value2}
                ]
        }
).pretty()
Example
> db.empDetails.find( { "Age": { $not: { $gt: "25" } } } )
{
        "_id" : ObjectId("5dd6636870fb13eec3963bf7"),
        "First_Name" : "Fathima",
        "Last_Name" : "Sheik",
        "Age" : "24",
        "e_mail" : "Fathima_Sheik.123@gmail.com",
        "phone" : "9000054321"
}


MongoDB Update() Method

>db.mycol.update({'title':'MongoDB Overview'},{$set:{'title':'New MongoDB Tutorial'}})
WriteResult({ "nMatched" : 1, "nUpserted" : 0, "nModified" : 1 })
>db.mycol.find()
{ "_id" : ObjectId(5983548781331adf45ec5), "title":"New MongoDB Tutorial"}
{ "_id" : ObjectId(5983548781331adf45ec6), "title":"NoSQL Overview"}
{ "_id" : ObjectId(5983548781331adf45ec7), "title":"Tutorials Point Overview"}
>
By default, MongoDB will update only a single document. To update multiple documents, you need to set a parameter 'multi' to true.
>db.mycol.update({'title':'MongoDB Overview'},
   {$set:{'title':'New MongoDB Tutorial'}},{multi:true})
The remove() Method

Syntax
Basic syntax of remove() method is as follows −
>db.COLLECTION_NAME.remove(DELLETION_CRITTERIA)

db.mycol.remove({'title':'MongoDB Overview'})
WriteResult({"nRemoved" : 1})
> db.mycol.find()
{"_id" : ObjectId("507f191e810c19729de860e2"), "title" : "NoSQL Overview" }
{"_id" : ObjectId("507f191e810c19729de860e3"), "title" : "Tutorials Point Overview" }

Remove Only One
If there are multiple records and you want to delete only the first record, then set justOne parameter in remove() method.
>db.COLLECTION_NAME.remove(DELETION_CRITERIA,1)
Remove All Documents
> db.mycol.remove({})
WriteResult({ "nRemoved" : 2 })
> db.mycol.find()
>

MongoDB - Projection
Syntax

db.COLLECTION_NAME.find({},{KEY:1})
db.empDetails.find({},{"First_Name":1})
{ "_id" : ObjectId("5f4650edb6cb26b0f747547d"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f4650efb6cb26b0f747547e"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f4650f1b6cb26b0f747547f"), "First_Name" : "Rachel" }
 db.empDetails.find({},{"First_Name":1,_id:0})
{ "First_Name" : "Rachel" }
{ "First_Name" : "Rachel" }
{ "First_Name" : "Rachel" }
> db.empDetails.find({},{First_Name:1,_id:0})
{ "First_Name" : "Rachel" }
{ "First_Name" : "Rachel" }
{ "First_Name" : "Rachel" }
The Limit() Method

Syntax
>db.COLLECTION_NAME.find().limit(NUMBER)
> db.empDetails.find({},{First_Name:1,_id:0}).limit(1)
{ "First_Name" : "Rachel" }
db.empDetails.find({"First_Name":"Rachel"}).limit(2)
{ "_id" : ObjectId("5f4650efb6cb26b0f747547e"), "First_Name" : "Rachel", "Last_Name" : "Christopher", "Age" : "22", "e_mail" : "Rachel_Christopher.123@gmail.com", "phone" : "9632543351" }
{ "_id" : ObjectId("5f4650f1b6cb26b0f747547f"), "First_Name" : "Rachel", "Last_Name" : "Christopher", "Age" : "22", "e_mail" : "Rachel_Christopher.123@gmail.com", "phone" : "9632543351" }
> db.empDetails.find({"First_Name":"Rachel"}).limit(2).pretty()
{
	"_id" : ObjectId("5f4650efb6cb26b0f747547e"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
> db.empDetails.find({"First_Name":"Rachel"}).limit(2).pretty()
{
	"_id" : ObjectId("5f4650efb6cb26b0f747547e"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
MongoDB Skip() Method

Syntax
>db.COLLECTION_NAME.find().limit(NUMBER).skip(NUMBER)

> db.empDetails.find({"First_Name":"Rachel"}).limit(2).skip(1)
{ "_id" : ObjectId("5f4650f1b6cb26b0f747547f"), "First_Name" : "Rachel", "Last_Name" : "Christopher", "Age" : "22", "e_mail" : "Rachel_Christopher.123@gmail.com", "phone" : "9632543351" }
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
> db.empDetails.find({"First_Name":"Rachel"}).limit(2).skip(1)
{ "_id" : ObjectId("5f4650f1b6cb26b0f747547f"), "First_Name" : "Rachel", "Last_Name" : "Christopher", "Age" : "22", "e_mail" : "Rachel_Christopher.123@gmail.com", "phone" : "9632543351" }
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
> db.empDetails.find({"First_Name":"Rachel"}).limit(2).skip(1).pretty()
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
> db.empDetails.find({"First_Name":"Rachel"}).limit(2).skip(2).pretty()
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }

The sort() Method

>db.COLLECTION_NAME.find().sort({KEY:1})

> db.empDetails.find().pretty().sort({Age:1})
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }
{
	"_id" : ObjectId("5f4650edb6cb26b0f747547d"),
	"First_Name" : "Radhika",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650efb6cb26b0f747547e"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
> db.empDetails.find().pretty().sort({_id:1})
{
	"_id" : ObjectId("5f4650edb6cb26b0f747547d"),
	"First_Name" : "Radhika",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650efb6cb26b0f747547e"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }
> db.empDetails.find().pretty().sort({_id:-1})
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650efb6cb26b0f747547e"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650edb6cb26b0f747547d"),
	"First_Name" : "Radhika",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
> db.empDetails.find({},{"First_Name":1}).pretty().sort({_id:1})
{ "_id" : ObjectId("5f4650edb6cb26b0f747547d"), "First_Name" : "Radhika" }
{ "_id" : ObjectId("5f4650efb6cb26b0f747547e"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f4650f1b6cb26b0f747547f"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }
> db.empDetails.find({},{"First_Name":1}).pretty().sort({First_Name:1})
{ "_id" : ObjectId("5f4650efb6cb26b0f747547e"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f4650f1b6cb26b0f747547f"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f4650edb6cb26b0f747547d"), "First_Name" : "Radhika" }
> db.empDetails.find({},{"First_Name":1}).pretty().sort({First_Name:1})














MongoDB - Indexing

The createIndex() Method

o create an index, you need to use createIndex() method of MongoDB.
Syntax
The basic syntax of createIndex() method is as follows().
>db.COLLECTION_NAME.createIndex({KEY:1})
 db.empDetails.createIndex({First_Name:1})
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
> db.empDetails.find().pretty()
{
	"_id" : ObjectId("5f4650edb6cb26b0f747547d"),
	"First_Name" : "Radhika",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650efb6cb26b0f747547e"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{
	"_id" : ObjectId("5f4650f1b6cb26b0f747547f"),
	"First_Name" : "Rachel",
	"Last_Name" : "Christopher",
	"Age" : "22",
	"e_mail" : "Rachel_Christopher.123@gmail.com",
	"phone" : "9632543351"
}
{ "_id" : ObjectId("5f46525bb6cb26b0f7475480"), "First_Name" : "Rachel" }
{ "_id" : ObjectId("5f465276b6cb26b0f7475481"), "First_Name" : "Rachel" }
> db.empDetails.getIndex
db.empDetails.getIndexKeys(   db.empDetails.getIndexes(
db.empDetails.getIndexSpecs(
> db.empDetails.getIndexes()
[
	{
		"v" : 2,
		"key" : {
			"_id" : 1
		},
		"name" : "_id_",
		"ns" : "test.empDetails"
	},
	{
		"v" : 2,
		"key" : {
			"First_Name" : 1
		},
		"name" : "First_Name_1",
		"ns" : "test.empDetails"
	}
]
MongoDB - Aggregation

The aggregate() Method

Syntax
Basic syntax of aggregate() method is as follows −
>db.COLLECTION_NAME.aggregate(AGGREGATE_OPERATION)

> db.empDetails.aggregate({$group:{_id:"$First_Name",num_names:{$sum:1}}})
{ "_id" : "Rachel", "num_names" : 4 }
{ "_id" : "Radhika", "num_names" : 1 }
> db.empDetails.aggregate({$group:{_id:"$First_Name",num_names:{$sum:-1}}})
{ "_id" : "Rachel", "num_names" : -4 }
{ "_id" : "Radhika", "num_names" : -1 }
> db.empDetails.aggregate({$group:{_id:"$Last_Name",num_names:{$sum:1}}})
{ "_id" : null, "num_names" : 2 }
{ "_id" : "Christopher", "num_names" : 3 }
> db.empDetails.aggregate({$group:{_id:"$Last_Name",num_names:{$avg:1}}})
{ "_id" : null, "num_names" : 1 }
{ "_id" : "Christopher", "num_names" : 1 }
> db.empDetails.aggregate({$group:{_id:"$Last_Name",num_names:{$max:1}}})
{ "_id" : null, "num_names" : 1 }
{ "_id" : "Christopher", "num_names" : 1 }

Modeling Embedded Relationships
db.users.insert({
	{
		"_id":ObjectId("52ffc33cd85242f436000001"),
		"contact": "987654321",
		"dob": "01-01-1991",
		"name": "Tom Benzamin",
		"address": [
			{
				"building": "22 A, Indiana Apt",
				"pincode": 123456,
				"city": "Los Angeles",
				"state": "California"
			},
			{
				"building": "170 A, Acropolis Apt",
				"pincode": 456789,
				"city": "Chicago",
				"state": "Illinois"
			}
		]
	}
})

db.users.findOne({"name":"Tom Benzamin"},{"address":1})

Modeling Referenced Relationships

{
   "_id":ObjectId("52ffc33cd85242f436000001"),
   "contact": "987654321",
   "dob": "01-01-1991",
   "name": "Tom Benzamin",
   "address_ids": [
      ObjectId("52ffc4a5d85242602e000000"),
      ObjectId("52ffc4a5d85242602e000001")
   ]
}

var result = db.users.findOne({"name":"Tom Benzamin"},{"address_ids":1})

Using DBRefs

$ref − This field specifies the collection of the referenced document

$id − This field specifies the _id field of the referenced document

$db − This is an optional field and contains the name of the database in which the referenced document lies

{
   "_id":ObjectId("53402597d852426020000002"),
   "address": {
   "$ref": "address_home",
   "$id": ObjectId("534009e4d852427820000002"),
   "$db": "tutorialspoint"},
   "contact": "987654321",
   "dob": "01-01-1991",
   "name": "Tom Benzamin"
}

var user = db.users.findOne({"name":"Tom Benzamin"})
var dbRef = user.address
db[dbRef.$ref].findOne({"_id":(dbRef.$id)})

{
   "_id" : ObjectId("534009e4d852427820000002"),
   "building" : "22 A, Indiana Apt",
   "pincode" : 123456,
   "city" : "Los Angeles",
   "state" : "California"
}

Aggregation Stage

1) match 2) group 3) project 4) sort 5) count 6) limit 7) skip 8) out

$match Stage

> db.docs.aggregate([{$match: {salary:"$8.32"}}]).pretty()
{
	"_id" : ObjectId("5f547d65e01390d3d881e35c"),
	"first_name" : "Brockie",
	"last_name" : "Lamlin",
	"email" : "blamlino@cbsnews.com",
	"gender" : "Male",
	"salary" : "$8.32"
}
> db.docs.aggregate([{$match: {salary:{$gt:"$8.32"}}}]).pretty()
{
	"_id" : ObjectId("5f547d65e01390d3d881e34a"),
	"first_name" : "Brina",
	"last_name" : "Pendock",
	"email" : "bpendock3@jiathis.com",
	"gender" : "Female",
	"salary" : "$88.39"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e357"),
	"first_name" : "Chiarra",
	"last_name" : "Dorricott",
	"email" : "cdorricottj@zimbio.com",
	"gender" : "Female",
	"salary" : "$94.64"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e359"),
	"first_name" : "Kristi",
	"last_name" : "Adkin",
	"email" : "kadkinl@nationalgeographic.com",
	"gender" : "Female",
	"salary" : "$82.84"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e35a"),
	"first_name" : "Steffen",
	"last_name" : "Sheldrake",
	"email" : "ssheldraken@webs.com",
	"gender" : "Male",
	"salary" : "$92.03"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e35e"),
	"first_name" : "Niven",
	"last_name" : "Molder",
	"email" : "nmolder1@unesco.org",
	"gender" : "Male",
	"salary" : "$95.38"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e361"),
	"first_name" : "Barnebas",
	"last_name" : "Paxman",
	"email" : "bpaxman4@google.fr",
	"gender" : "Male",
	"salary" : "$94.32"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e366"),
	"first_name" : "Raimundo",
	"last_name" : "Camoys",
	"email" : "rcamoysu@addthis.com",
	"gender" : "Male",
	"salary" : "$98.88"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e367"),
	"first_name" : "Danny",
	"last_name" : "Birdseye",
	"email" : "dbirdseyet@usatoday.com",
	"gender" : "Male",
	"salary" : "$88.38"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e36a"),
	"first_name" : "Estelle",
	"last_name" : "Poetz",
	"email" : "epoetzx@cocolog-nifty.com",
	"gender" : "Female",
	"salary" : "$98.70"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e36b"),
	"first_name" : "Edd",
	"last_name" : "Fishburn",
	"email" : "efishburnz@jiathis.com",
	"gender" : "Male",
	"salary" : "$9.12"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e370"),
	"first_name" : "Kaine",
	"last_name" : "Humbee",
	"email" : "khumbee13@scientificamerican.com",
	"gender" : "Male",
	"salary" : "$90.47"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e373"),
	"first_name" : "Claudetta",
	"last_name" : "Daily",
	"email" : "cdaily17@yandex.ru",
	"gender" : "Female",
	"salary" : "$84.69"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e379"),
	"first_name" : "Jacquetta",
	"last_name" : "Peplaw",
	"email" : "jpeplaw1c@omniture.com",
	"gender" : "Female",
	"salary" : "$8.90"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e37e"),
	"first_name" : "Michel",
	"last_name" : "Bedburrow",
	"email" : "mbedburrow1h@meetup.com",
	"gender" : "Male",
	"salary" : "$83.06"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e386"),
	"first_name" : "Ermanno",
	"last_name" : "Cannop",
	"email" : "ecannop1n@ycombinator.com",
	"gender" : "Male",
	"salary" : "$94.71"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e387"),
	"first_name" : "Roderigo",
	"last_name" : "Suermeier",
	"email" : "rsuermeier1t@github.com",
	"gender" : "Male",
	"salary" : "$9.87"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e38c"),
	"first_name" : "Dominik",
	"last_name" : "Robison",
	"email" : "drobison1w@shutterfly.com",
	"gender" : "Male",
	"salary" : "$98.64"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e38f"),
	"first_name" : "Adelaide",
	"last_name" : "Salamon",
	"email" : "asalamon1y@princeton.edu",
	"gender" : "Female",
	"salary" : "$83.50"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e399"),
	"first_name" : "Sarena",
	"last_name" : "Careswell",
	"email" : "scareswell26@boston.com",
	"gender" : "Female",
	"salary" : "$8.38"
}
{
	"_id" : ObjectId("5f547d65e01390d3d881e39b"),
	"first_name" : "Hetti",
	"last_name" : "Pandie",
	"email" : "hpandie2b@privacy.gov.au",
	"gender" : "Female",
	"salary" : "$86.30"
}

$group Stage

> db.docs.aggregate([{$group: {_id:"$gender"}}]).pretty()
{ "_id" : "Female" }
{ "_id" : "Male" }

> db.dummy.aggregate([{$group:{_id:"$friends.name"}}]).pretty()
{ "_id" : [ "Sweet Rosario", "Socorro Case", "Myrtle Cole" ] }
{ "_id" : [ "Castro Roman", "Mckee Lawson", "Tia Turner" ] }
{ "_id" : [ "Young Brewer", "Betsy May", "Cecile Boyer" ] }
{ "_id" : [ "Robbie Hooper", "Angela Barry", "Rojas Floyd" ] }
{ "_id" : [ "Schneider Wood", "Dillard Ball", "Gomez Melendez" ] }
{ "_id" : [ "Gamble Larson", "Carson Massey", "Alyson Clayton" ] }
> db.dummy.aggregate([{$group:{_id:"$tags"}}]).pretty()
{
	"_id" : [
		"ipsum",
		"sunt",
		"exercitation",
		"ipsum",
		"voluptate",
		"do",
		"dolor"
	]
}
{
	"_id" : [
		"officia",
		"ex",
		"minim",
		"ad",
		"consectetur",
		"fugiat",
		"velit"
	]
}
{
	"_id" : [
		"eiusmod",
		"eiusmod",
		"laboris",
		"irure",
		"aute",
		"aliquip",
		"aliqua"
	]
}
{
	"_id" : [
		"nostrud",
		"voluptate",
		"sunt",
		"non",
		"irure",
		"Lorem",
		"eu"
	]
}
{
	"_id" : [
		"sunt",
		"reprehenderit",
		"aliqua",
		"duis",
		"dolor",
		"sit",
		"veniam"
	]
}
{
	"_id" : [
		"labore",
		"duis",
		"officia",
		"id",
		"deserunt",
		"consectetur",
		"et"
	]
}
> db.dummy.aggregate([{$group:{_id:{age:"$age",gender:"$gender"}}}]).pretty()
{ "_id" : { "age" : 40, "gender" : "female" } }
{ "_id" : { "age" : 39, "gender" : "female" } }
{ "_id" : { "age" : 37, "gender" : "female" } }
{ "_id" : { "age" : 32, "gender" : "female" } }
> db.dummy.aggregate([{$group:{_id:{age:"$age",na,e:"$name"}}}]).pretty()
2020-09-06T12:33:38.261+0530 E QUERY    [thread1] ReferenceError: na is not defined :
@(shell):1:46
> db.dummy.aggregate([{$group:{_id:{age:"$age",name:"$name"}}}]).pretty()
{ "_id" : { "age" : 39, "name" : "Louella Horton" } }
{ "_id" : { "age" : 40, "name" : "Jeanine Castillo" } }
{ "_id" : { "age" : 37, "name" : "Elisabeth Wise" } }
{ "_id" : { "age" : 32, "name" : "Tonya Sanchez" } }
{ "_id" : { "age" : 39, "name" : "Becky Barton" } }
{ "_id" : { "age" : 32, "name" : "Aurora Casey" } }
> db.dummy.aggregate([{$group:{_id:{age:"$age",name:"$name",gender:"$gender"}}}]).pretty()
{
	"_id" : {
		"age" : 39,
		"name" : "Louella Horton",
		"gender" : "female"
	}
}
{
	"_id" : {
		"age" : 32,
		"name" : "Tonya Sanchez",
		"gender" : "female"
	}
}
{
	"_id" : {
		"age" : 40,
		"name" : "Jeanine Castillo",
		"gender" : "female"
	}
}
{
	"_id" : {
		"age" : 37,
		"name" : "Elisabeth Wise",
		"gender" : "female"
	}
}
{
	"_id" : {
		"age" : 39,
		"name" : "Becky Barton",
		"gender" : "female"
	}
}
{
	"_id" : {
		"age" : 32,
		"name" : "Aurora Casey",
		"gender" : "female"
	}
}

SET FIELDS IN DOCUMENT

{ "_id" : ObjectId("5e1a890870be6e1146e53524"), "name" : "Dale Duke", "age" : 17, "course" : "Tourism", "email" : "dale@example.com" }

PUSH ARRAYS IN DOCUMENT

db.student.update({ _id:ObjectId("5e1a890870be6e1146e53524") },
                       { $push:
                           { subjects:
                               { $each: [ "math", "science", "physical education" ]
                               }
                           }
                       });

 db.student.find({_id:ObjectId("5e1a890870be6e1146e53524")}).pretty();
{
        "_id" : ObjectId("5e1a890870be6e1146e53524"),
        "name" : "Dale Duke",
        "age" : 17,
        "course" : "Tourism",
        "email" : "dale@example.com",
        "subjects" : [
                "math",
                "science",
                "physical education"
        ]
}

REMOVE FIELDS IN ARRAYS

db.student.update( { _id: ObjectId("5e1a890870be6e1146e53524")}, { $pop: { subjects: -1 } } );

{
        "_id" : ObjectId("5e1a890870be6e1146e53524"),
        "name" : "Dale Duke",
        "age" : 17,
        "course" : "Tourism",
        "email" : "dale@example.com",
        "subjects" : [
                "science",
                "physical education"
        ]
}
